#version 460

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D output_img;

uniform vec3 look_dir;
uniform vec3 up_dir;
uniform vec3 right_dir;
uniform vec3 cam_pos;
uniform float time;

const float INFINITY = 3.40282e+38;
const float EPSILON_F = 1.19209e-07;
const float PI = 3.14159265358979;

const uint DIFFUSE = 0;
const uint REFLECTIVE = 1;

const vec3 SUN_POS = normalize(vec3(1.0, 1.0, 0.5));
const float SHADOW_CONSTANT = 0.15;

const mat3 ROTATION = mat3(cos(time * 0.2 * PI), 0.0, sin(time * 0.2 * PI),
                           0.0, 1.0, 0.0,
                           -sin(time * 0.2 * PI), 0.0, cos(time * 0.2 * PI));

struct Ray {
    vec3 o;
    vec3 d;
};

struct HitRecord {
    vec3 p;
    vec3 normal;
    vec3 surface_color;
    float t;
    bool front_face;
    uint material;
};

struct Sphere {
    vec3 center;
    vec3 color;
    float radius;
    uint material;
};

struct Plane {
    vec3 normal;
    vec3 color;
    float height;
    uint material;
};

struct Triangle {
    vec3 p0;
    vec3 p1;
    vec3 p2;
    vec3 color;
    uint material;
};

void set_face_normal(const in Ray ray, const in vec3 normal, inout HitRecord record) {
    record.front_face = dot(ray.d, normal) < 0;
    record.normal = record.front_face ? normal : -normal;
}

bool sphere_hit(const in Sphere sphere, 
                const in Ray ray,
                inout HitRecord record,
                const in float t_min,
                const in float t_max)
{
    const vec3 oc = ray.o - sphere.center;
    const float a = dot(ray.d, ray.d);
    const float b = dot(oc, ray.d);
    const float c = dot(oc, oc) - sphere.radius * sphere.radius;
    const float d = b * b - a * c;

    if(d < 0) { return false; }
    const float sqrtd = sqrt(d);

    float root = (-b - sqrtd) / a;
    if(root <= t_min || t_max <= root) {
        root = (-b + sqrtd) / a;
        if(root <= t_min || t_max <= root) {
            return false;
        }
    }

    record.t = root;
    record.material = sphere.material;
    record.p = ray.o + ray.d * record.t;
    record.surface_color = sphere.color;
    const vec3 normal = (record.p - sphere.center) / sphere.radius;
    set_face_normal(ray, normal, record);

    return true;
}

bool plane_hit(const in Plane plane,
               const in Ray ray,
               inout HitRecord record,
               const in float t_min,
               const in float t_max)
{
    const float d = dot(plane.normal, ray.d);
    if(abs(d) >= EPSILON_F) {
        const float t = -(dot(plane.normal, ray.o) - plane.height) / d;
        if(t_min <= t && t <= t_max) {
            record.t = t;
            record.material = plane.material;
            record.p = ray.o + ray.d * record.t;
            record.surface_color = plane.color;
            set_face_normal(ray, plane.normal, record);

            return true;
        }
    }

    return false;
}

bool triangle_hit(const in Triangle triangle,
                  const in Ray ray,
                  inout HitRecord record,
                  const in float t_min,
                  const in float t_max)
{
    const vec3 p0p1 = triangle.p1 - triangle.p0;
    const vec3 p0p2 = triangle.p2 - triangle.p0;
    const vec3 normal = normalize(cross(p0p1, p0p2));
    const float normal_dot_direction = dot(normal, ray.d);
    
    if(abs(normal_dot_direction) < EPSILON_F) { return false; }
    
    const float d = -dot(normal, triangle.p0);
    const float t = -(dot(normal, ray.o) + d) / normal_dot_direction;
    if(t_max <= t || t <= t_min) { return false; }
    
    const vec3 p = ray.o + ray.d * t;
    const vec3 e0 = p0p1;
    const vec3 e1 = triangle.p2 - triangle.p1;
    const vec3 e2 = triangle.p0 - triangle.p2;
    const vec3 pp0 = p - triangle.p0;
    const vec3 pp1 = p - triangle.p1;
    const vec3 pp2 = p - triangle.p2;
    vec3 c0 = cross(e0, pp0);
    vec3 c1 = cross(e1, pp1);
    vec3 c2 = cross(e2, pp2);

    if(dot(normal, c0) > 0 && 
       dot(normal, c1) > 0 &&
       dot(normal, c2) > 0)
    {
        record.t = t;
        record.p = p;
        record.normal = normal;
        record.material = triangle.material;
        record.surface_color = triangle.color;
        set_face_normal(ray, normal, record);

        return true;
    }

    return false;
}

bool any_hit(const in Ray ray, inout HitRecord record, const float t_min, float t_max) {
    HitRecord record_tmp = HitRecord(vec3(0), vec3(0), vec3(0), 0, false, 0);
    bool hit_something = false;

    if(sphere_hit(Sphere(
                      vec3(0.0, 0.0, 0.0), 
                      vec3(1.0, 0.55, 0.1),
                      1.0,
                      1),
                  ray, 
                  record_tmp, 
                  t_min, 
                  t_max))
    {
        hit_something = true;
        t_max = record_tmp.t;
        record = record_tmp;
    }

    if(sphere_hit(Sphere(
                      vec3(
                          1.4,
                          0.08 * sin(1.3 * time + PI / 3) + 0.8,
                          2.3 * sin(time + PI / 8) + 0.7), 
                      vec3(0.0, 0.65, 0.4),
                      0.4,
                      0),
                  ray, 
                  record_tmp, 
                  t_min, 
                  t_max))
    {
        hit_something = true;
        t_max = record_tmp.t;
        record = record_tmp;
    }

    if(plane_hit(Plane(
                      vec3(0.0, 1.0, 0.0), 
                      vec3(0.6),
                      -0.6,
                      0),
                  ray, 
                  record_tmp, 
                  t_min, 
                  t_max))
    {
        hit_something = true;
        t_max = record_tmp.t;
        record = record_tmp;
    }

    if(triangle_hit(Triangle(
                      vec3(-3.0, -.6, -3.0),
                      vec3(-4.0, -.6, 0.0),
                      vec3(-5.0, 2.4, -2.0),
                      vec3(.8),
                      0),
                  ray, 
                  record_tmp, 
                  t_min, 
                  t_max))
    {
        hit_something = true;
        t_max = record_tmp.t;
        record = record_tmp;
    }

    if(triangle_hit(Triangle(
                      vec3(-5.0, 2.4, -2.0),
                      vec3(-2.0, 2.4, -3.0),
                      vec3(-3.0, -.6, -3.0),
                      vec3(1.0, 0.0, 1.0),
                      1),
                  ray, 
                  record_tmp, 
                  t_min, 
                  t_max))
    {
        hit_something = true;
        t_max = record_tmp.t;
        record = record_tmp;
    }

    return hit_something;
}

vec3 ray_color(in Ray ray) {
    vec3 total_attenuation = vec3(1.0);
    for(int i = 0; i < 5; i++) {
        HitRecord record = HitRecord(vec3(0), vec3(0), vec3(0), 0, false, 0);

        if(any_hit(ray, record, EPSILON_F, INFINITY)) {
            HitRecord shadow_record = HitRecord(vec3(0), vec3(0), vec3(0), 0, false, 0);
            vec3 attenuation = vec3(1.0);
            const float diff = clamp(dot(record.normal, SUN_POS), SHADOW_CONSTANT, 1.0);
            float shadow = 1;

            switch(record.material) {
                case DIFFUSE: {
                    attenuation = record.surface_color;
                    
                    Ray shadow_ray = Ray(record.p + record.normal * 1e-4, SUN_POS);
                    ray.o = shadow_ray.o;
                    ray.d = record.normal;

                    if(any_hit(shadow_ray, shadow_record, EPSILON_F, INFINITY)) { shadow = SHADOW_CONSTANT; }
                    
                    total_attenuation *= clamp(attenuation * diff, 0.0, shadow);
                    return total_attenuation;
                }

                case REFLECTIVE: {
                    attenuation = record.surface_color;

                    Ray shadow_ray = Ray(record.p + record.normal * 1e-4, SUN_POS);
                    ray.o = shadow_ray.o;
                    ray.d = reflect(ray.d, record.normal);

                    if(any_hit(shadow_ray, shadow_record, EPSILON_F, INFINITY)) { shadow = SHADOW_CONSTANT; }

                    attenuation = clamp(attenuation * diff, 0.0, shadow);
                    total_attenuation *= attenuation;
                    break;
                }                    

                default: { total_attenuation *= vec3(1.0); }
            }
        } else {
            const vec3 direction = normalize(ray.d);
            const float t = 0.5 * (direction.y + 1.0);
            const vec3 c = (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
            return total_attenuation * c;
        }
    }

    return total_attenuation;
}

void main() {
    vec4 result = vec4(0);
    const ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
    
    const ivec2 tile = ivec2(gl_WorkGroupID.xy);
    const ivec2 invocation = ivec2(gl_LocalInvocationID.xy);
    const ivec2 pixel_coord = tile * 16 + invocation;
    const ivec2 dims = ivec2(1280, 720);
    const vec2 uv = vec2(
        float(pixel_coord.x * 2 - dims.x)  / float(dims.x),
        (float(pixel_coord.y * 2 - dims.y) / float(dims.y)) / (16.0 / 9.0)
    );

    Ray ray = Ray(cam_pos, normalize((uv.x - 1e-4) * right_dir + (uv.y - 1e-4) * up_dir + radians(70) * look_dir));
    result += vec4(ray_color(ray), 1.0) * 0.25;

    ray = Ray(cam_pos, normalize((uv.x + 1e-4) * right_dir + (uv.y + 1e-4) * up_dir + radians(70) * look_dir));
    result += vec4(ray_color(ray), 1.0) * 0.25;
    
    ray = Ray(cam_pos, normalize((uv.x - 1e-4) * right_dir + (uv.y + 1e-4) * up_dir + radians(70) * look_dir));
    result += vec4(ray_color(ray), 1.0) * 0.25;
    
    ray = Ray(cam_pos, normalize((uv.x + 1e-4) * right_dir + (uv.y - 1e-4) * up_dir + radians(70) * look_dir));
    result += vec4(ray_color(ray), 1.0) * 0.25;


    imageStore(output_img, texel_coord, result);
}